#!/usr/bin/env bash


main() {
    declare psmgr=/tmp/nginx-buildpack-wait
    declare -a pids signals

    # Evaluate config to get environment variables
    mkdir -p config
    if [[ "$OSTYPE" == "linux"* ]]; then
        export NGINX_CONNECTION_METHOD=epoll
    elif [[ "$OSTYPE" == "darwin"* || "$OSTYPE" == "freebsd"* ]]; then
        export NGINX_CONNECTION_METHOD=kqueue
    fi
    coffee ./nginx.conf.coffee > config/nginx.conf

    # Use named pipe to detect exit of any subprocess.
    rm -f "$psmgr"
    mkfifo "$psmgr"

    # Start app.
    app-start SIGTERM "$@"
    pid=$!

    # Wait for app to start.
    at app-waiting
    while [[ ! -e "/tmp/app-initialized" ]]; do
        sleep 1
    done
    at app-initialized

    # Create logs dir. NGINX insists on creating logs/error.log even
    # though it will remain an empty file, with actual logging on stderr.
    mkdir -p logs

    # Start NGINX. SIGQUIT for graceful shutdown.
    aux-start nginx SIGQUIT bin/nginx -p "$PWD" -c config/nginx.conf

    # Don't exit top script until all subprocesses are done.
    trap '' SIGTERM SIGINT

    # This read will block the process waiting on a msg to be put into the
    # fifo. If any of the processes defined above should exit, a msg will be
    # put into the fifo causing the read operation to un-block. The process
    # putting the msg into the fifo will use it's process name as a msg so that
    # we can print the offending process to stdout.
    declare exit_process
    read exit_process < "$psmgr"
    at "exit process=$exit_process"

    # Remove the FIFO. This allows following writes to simply create a file,
    # rather than blocking because there's nothing reading the other end.
    rm -f "$psmgr"

    # Clean up any running processes.
    # SIGTERM application just in case something else crashed.
    # If the dyno is shutting down, then SIGTERM has already been sent.
    at "kill-app pid=$pid"
    kill -SIGTERM $pid 2> /dev/null

    # Wait for the app to finish.
    at "wait-app pid=$pid"
    wait $pid

    # Kill the auxiliary processes.
    # Send each one SIGHUP which will be translated by the trap in aux-start.
    declare name
    for name in "${!pids[@]}"; do
        at "kill-aux name=$name pid=${pids[$name]} signal=${signals[$name]}"
        kill -SIGHUP "${pids[$name]}" 2> /dev/null
    done
}

app-start() {
    declare name=app signal=$1
    shift

    (
        at "$name-start"

        # Start child in the background. This is before the trap because
        # the app needs to be able to receive when the dyno broadcasts
        # SIGTERM on shutdown.
        "$@" &
        APP_PID="$!"
        touch /tmp/nginx-app-start

        # Translate SIGHUP/SIGTERM to the appropriate signal to stop the child
        # (probably SIGTERM in this case). Since this doesn't exit, it won't
        # cancel the wait.
        trap "kill -$signal $APP_PID 2> /dev/null" SIGHUP SIGTERM SIGINT

        # Wait for the app to finish, either by crash or by $signal
        wait

        # Notify FIFO if this finishes first
        echo "$name" > "$psmgr"
        touch /tmp/nginx-app-end

        at "$name-end"
    ) &

    at "$name-launched pid=$!"
}

aux-start() {
    declare name=$1 signal=$2
    shift 2

    (
        at "$name-start"

        # Ignore SIGTERM; this is inherited by the child process.
        trap '' SIGTERM

        # Start child in the background.
        "$@" &
        NGINX_PID="$!"
        
        # Translate SIGHUP to the appropriate signal to stop the child
        # (anything except SIGTERM which is ignored). Since this doesn't
        # exit, it won't cancel the wait.
        trap "kill -$signal $NGINX_PID 2> /dev/null" SIGHUP SIGINT

        # Wait for child to finish, either by crash or by $signal
        wait

        # Notify FIFO if this finishes first
        echo "$name" > "$psmgr"

        at "$name-end"
    ) &

    pids[$name]=$!
    signals[$name]=$signal
    at "$name-launched pid=$!"
}

at() {
    echo "buildpack=nginx at=$*"
}

[[ "$0" != "$BASH_SOURCE" ]] || main "$@"
